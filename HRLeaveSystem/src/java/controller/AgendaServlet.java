package controller;

import dao.AgendaDAO;
import entity.Request;
import entity.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.io.IOException;
import java.util.List;

public class AgendaServlet extends HttpServlet {

    AgendaDAO dao = new AgendaDAO();

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {

        HttpSession session = req.getSession();
        User currentUser = (User) session.getAttribute("user");

        // L·∫•y link ng∆∞·ªùi d√πng ƒë√£ click t·ª´ menu (t·ª´ URI)
        String fullURI = req.getRequestURI(); // v√≠ d·ª•: /leave_system/department_head/view_and_approve_subordinates'_agenda
        String contextPath = req.getContextPath(); // /leave_system
        String featureLink = fullURI.substring(contextPath.length() + 1); // k·∫øt qu·∫£: department_head/view_and_approve_subordinates'_agenda

        // L∆∞u l·∫°i ƒë∆∞·ªùng link ƒë·ªÉ d√πng ·ªü view
        req.setAttribute("currentFeatureLink", featureLink);

        // L·∫•y danh s√°ch c·∫•p d∆∞·ªõi
        List<User> subordinates = dao.getSubordinates(currentUser.getUserId());

        req.setAttribute("subordinates", subordinates);
        req.getRequestDispatcher("/common/subordinates.jsp").forward(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {

        req.setCharacterEncoding("UTF-8");

        HttpSession session = req.getSession(false);
        if (session == null || session.getAttribute("user") == null) {
            resp.sendRedirect(req.getContextPath() + "/common/login.jsp");
            return;
        }

        // L·∫•y ng∆∞·ªùi d√πng hi·ªán t·∫°i
        User currentUser = (User) session.getAttribute("user");

        // B·∫Øt bu·ªôc ph·∫£i c√≥ userId (ng∆∞·ªùi ƒëang ƒë∆∞·ª£c xem)
        int targetUserId = Integer.parseInt(req.getParameter("userId"));

        // üîπ N·∫øu c√≥ th√¥ng tin duy·ªát ƒë∆°n ƒë∆∞·ª£c g·ª≠i l√™n th√¨ x·ª≠ l√Ω
        String requestIdParam = req.getParameter("requestId");
        String action = req.getParameter("action"); // Approved ho·∫∑c Rejected

        if (requestIdParam != null && action != null) {
            try {
                int requestId = Integer.parseInt(requestIdParam);

                // G·ªçi DAO ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i duy·ªát ƒë∆°n
                dao.updateRequestStatus(requestId, action, currentUser.getUserId());
            } catch (NumberFormatException e) {
                e.printStackTrace(); // Log l·ªói n·∫øu requestId sai ƒë·ªãnh d·∫°ng
            }
        }

        // üî∏ D√π c√≥ duy·ªát hay kh√¥ng, lu√¥n th·ª±c hi·ªán c√°c b∆∞·ªõc d∆∞·ªõi ƒë√¢y (gi·ªØ nguy√™n logic c≈©)
        User selectedUser = dao.getUserById(targetUserId);
        List<Request> requests = dao.getRequestsByUser(targetUserId);

        boolean canApprove = dao.hasApprovalPermission(currentUser.getUserId());

        req.setAttribute("selectedUser", selectedUser);
        req.setAttribute("selectedUserRequests", requests);
        req.setAttribute("canApprove", canApprove);

        // L∆∞u l·∫°i link ƒë·ªÉ gi·ªØ t√≠nh nƒÉng "quay l·∫°i menu"
        String fullURI = req.getRequestURI();
        String contextPath = req.getContextPath();
        String featureLink = fullURI.substring(contextPath.length() + 1);
        req.setAttribute("currentFeatureLink", featureLink);

        // Chuy·ªÉn ƒë·∫øn trang hi·ªÉn th·ªã agenda c·ªßa c·∫•p d∆∞·ªõi
        req.getRequestDispatcher("/common/viewSubordinateAgenda.jsp").forward(req, resp);
    }

}
